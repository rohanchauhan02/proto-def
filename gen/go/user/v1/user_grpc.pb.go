// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/user/v1/user.proto

package userv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_CreateUser_FullMethodName         = "/proto.user.v1.UserService/CreateUser"
	UserService_GetUser_FullMethodName            = "/proto.user.v1.UserService/GetUser"
	UserService_ListUsers_FullMethodName          = "/proto.user.v1.UserService/ListUsers"
	UserService_StreamUserUpdates_FullMethodName  = "/proto.user.v1.UserService/StreamUserUpdates"
	UserService_BulkCreateUsers_FullMethodName    = "/proto.user.v1.UserService/BulkCreateUsers"
	UserService_ChatWithUser_FullMethodName       = "/proto.user.v1.UserService/ChatWithUser"
	UserService_ProcessUserActions_FullMethodName = "/proto.user.v1.UserService/ProcessUserActions"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// User service definition with streaming
type UserServiceClient interface {
	// Unary RPC (existing)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	// Server Streaming RPC
	StreamUserUpdates(ctx context.Context, in *StreamUserUpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UserUpdate], error)
	// Client Streaming RPC
	BulkCreateUsers(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateUserRequest, BulkCreateUsersResponse], error)
	// Bidirectional Streaming RPC
	ChatWithUser(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UserMessage, UserMessage], error)
	// Bidirectional Streaming with multiple responses per request
	ProcessUserActions(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UserAction, ActionResult], error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UserService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UserService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, UserService_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) StreamUserUpdates(ctx context.Context, in *StreamUserUpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UserUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[0], UserService_StreamUserUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamUserUpdatesRequest, UserUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserService_StreamUserUpdatesClient = grpc.ServerStreamingClient[UserUpdate]

func (c *userServiceClient) BulkCreateUsers(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateUserRequest, BulkCreateUsersResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[1], UserService_BulkCreateUsers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CreateUserRequest, BulkCreateUsersResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserService_BulkCreateUsersClient = grpc.ClientStreamingClient[CreateUserRequest, BulkCreateUsersResponse]

func (c *userServiceClient) ChatWithUser(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UserMessage, UserMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[2], UserService_ChatWithUser_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UserMessage, UserMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserService_ChatWithUserClient = grpc.BidiStreamingClient[UserMessage, UserMessage]

func (c *userServiceClient) ProcessUserActions(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UserAction, ActionResult], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[3], UserService_ProcessUserActions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UserAction, ActionResult]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserService_ProcessUserActionsClient = grpc.BidiStreamingClient[UserAction, ActionResult]

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
//
// User service definition with streaming
type UserServiceServer interface {
	// Unary RPC (existing)
	CreateUser(context.Context, *CreateUserRequest) (*User, error)
	GetUser(context.Context, *GetUserRequest) (*User, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	// Server Streaming RPC
	StreamUserUpdates(*StreamUserUpdatesRequest, grpc.ServerStreamingServer[UserUpdate]) error
	// Client Streaming RPC
	BulkCreateUsers(grpc.ClientStreamingServer[CreateUserRequest, BulkCreateUsersResponse]) error
	// Bidirectional Streaming RPC
	ChatWithUser(grpc.BidiStreamingServer[UserMessage, UserMessage]) error
	// Bidirectional Streaming with multiple responses per request
	ProcessUserActions(grpc.BidiStreamingServer[UserAction, ActionResult]) error
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) CreateUser(context.Context, *CreateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServiceServer) GetUser(context.Context, *GetUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedUserServiceServer) StreamUserUpdates(*StreamUserUpdatesRequest, grpc.ServerStreamingServer[UserUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method StreamUserUpdates not implemented")
}
func (UnimplementedUserServiceServer) BulkCreateUsers(grpc.ClientStreamingServer[CreateUserRequest, BulkCreateUsersResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BulkCreateUsers not implemented")
}
func (UnimplementedUserServiceServer) ChatWithUser(grpc.BidiStreamingServer[UserMessage, UserMessage]) error {
	return status.Errorf(codes.Unimplemented, "method ChatWithUser not implemented")
}
func (UnimplementedUserServiceServer) ProcessUserActions(grpc.BidiStreamingServer[UserAction, ActionResult]) error {
	return status.Errorf(codes.Unimplemented, "method ProcessUserActions not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_StreamUserUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamUserUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).StreamUserUpdates(m, &grpc.GenericServerStream[StreamUserUpdatesRequest, UserUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserService_StreamUserUpdatesServer = grpc.ServerStreamingServer[UserUpdate]

func _UserService_BulkCreateUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).BulkCreateUsers(&grpc.GenericServerStream[CreateUserRequest, BulkCreateUsersResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserService_BulkCreateUsersServer = grpc.ClientStreamingServer[CreateUserRequest, BulkCreateUsersResponse]

func _UserService_ChatWithUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).ChatWithUser(&grpc.GenericServerStream[UserMessage, UserMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserService_ChatWithUserServer = grpc.BidiStreamingServer[UserMessage, UserMessage]

func _UserService_ProcessUserActions_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).ProcessUserActions(&grpc.GenericServerStream[UserAction, ActionResult]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserService_ProcessUserActionsServer = grpc.BidiStreamingServer[UserAction, ActionResult]

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.user.v1.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _UserService_ListUsers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamUserUpdates",
			Handler:       _UserService_StreamUserUpdates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BulkCreateUsers",
			Handler:       _UserService_BulkCreateUsers_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ChatWithUser",
			Handler:       _UserService_ChatWithUser_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ProcessUserActions",
			Handler:       _UserService_ProcessUserActions_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/user/v1/user.proto",
}
